#!/usr/bin/env ruby

#            ---------------------------------------------------
#                             Thoron Framework                                
#            ---------------------------------------------------
#                  Copyright (C) <2020>  <Entynetproject>       
#
#        This program is free software: you can redistribute it and/or modify
#        it under the terms of the GNU General Public License as published by
#        the Free Software Foundation, either version 3 of the License, or
#        any later version.
#
#        This program is distributed in the hope that it will be useful,
#        but WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#        GNU General Public License for more details.
#
#        You should have received a copy of the GNU General Public License
#        along with this program.  If not, see <http://www.gnu.org/licenses/>.

system("printf '\033]2;Thoron Framework\a'")

e = "\033[1;31m[-] \033[0m"
p = "\033[1;77m[>] \033[0m"
g = "\033[1;34m[*] \033[0m"
s = "\033[1;32m[+] \033[0m"
h = "\033[1;77m[@] \033[0m"
r = "\033[1;77m[#] \033[0m"

lhost = ""
lport = ""
shell = ""
file = ""
type = ""

system("cat banner/banner.txt")
puts ""
puts "Thoron Framework v1.0"
puts "---------------------"
puts ""

loop do
print "\033[4mthoron\033[0m> "
c = gets.chomp
if c == ""
    nil
elsif c == "exit"
    abort()
elsif c == "clear"
    system("clear")
elsif c == "update"
    system("chmod +x etc/update.sh && etc/update.sh")
elsif c == "help"
    puts ""
    puts "Core Commands"
    puts "============="
    system("cat data/cmds/core_cmds.txt")
    puts ""
elsif c[0..6] == "modules"
    if c[8..-1] == ""
        puts "Usage: modules [-p|-l]"
    else
        if c[8..-1] == "-l"
            puts ""
            puts "Listeners"
            puts "========="
            system("cat data/listeners/listeners.txt")
            puts ""
        elsif c[8..-1] == "-p"
            puts ""
            puts "Payloads"
            puts "========"
            system("cat data/payloads/payloads.txt")
            puts ""
        else
            puts "Usage: modules [-p|-l]"
        end
    end
elsif c[0..2] == "use"
    if c[4..-1] == ""
        puts "Usage: use <module>"
    else
        if File.exists? "modules/#{c[4..-1]}.rb"
            loop do
                type = c[c.index(' ')+1..c.index('/')][0..-2]
                ifraw = c[4..-1]
                print "\033[4mthoron\033[0m(\033[1;31m#{c[4..-1]}\033[0m)> "
                ui = gets.chomp
                if ui == ""
                    nil
                elsif ui == "help"
                    puts ""
                    puts "Core Commands"
                    puts "============="
                    system("cat data/cmds/core_cmds.txt")
                    puts ""
                    puts "Module Commands"
                    puts "==============="
                    system("cat data/cmds/module_cmds.txt")
                    puts ""
                elsif ui == "clear"
                    system("clear")
                elsif ui == "update"
                    system("chmod +x etc/update.sh && etc/update.sh")
                elsif ui == "exit"
                    break
                elsif ui[0..6] == "modules"
                    if ui[8..-1] == ""
                        puts "Usage: modules [-p|-l]"
                    else
                        if ui[8..-1] == "-l"
                            puts ""
                            puts "Listeners"
                            puts "========="
                            system("cat data/listeners/listeners.txt")
                            puts ""
                        elsif ui[8..-1] == "-p"
                            puts ""
                            puts "Payloads"
                            puts "========"
                            system("cat data/payloads/payloads.txt")
                            puts ""
                        else
                            puts "Usage: modules [-p|-l]"
                        end
                    end
                elsif ui[0..2] == "use"
                    if ui[4..-1] == ""
                        puts "Usage: use <module>"
                    else
                        if File.exists? "modules/#{ui[4..-1]}.rb"
                            c[4..-1] = ui[4..-1]
                            type = ui[ui.index(' ')+1..ui.index('/')][0..-2]
                            ifraw = ui[4..-1]
                        else
                            puts "#{e}No such module!"
                        end
                    end
                elsif ui == "info"
                    if type == "payload"
                        if ifraw == "payload/cmd" or ifraw == "payload/raw"
                            puts ""
                            puts "Payload Options"
                            puts "==============="
                            system("cat data/payloads/raw/info.txt")
                            puts ""
                        else
                            puts ""
                            puts "Payload Options"
                            puts "==============="
                            system("cat data/payloads/other/info.txt")
                            puts ""
                        end
                    else
                        puts ""
                        puts "Listener Options"
                        puts "================"
                        system("cat data/listeners/info.txt")
                        puts ""
                    end
                elsif ui.split()[0] == "set"
                    if ui.split()[1] == ""
                        puts "Usage: set <option> <value>"
                    else
                        if ui.split()[2] == ""
                            puts "Usage: set <option> <value>"
                        else
                            if type == "payload"
                                if ifraw == "payload/cmd" or ifraw == "payload/raw"
                                    if ui.split()[1].downcase == "lhost"
                                        lhost = ui.split()[2]
                                        puts "#{s}LHOST ==> #{ui.split()[2]}"
                                    elsif ui.split()[1].downcase == "lport"
                                        lport = ui.split()[2]
                                        puts "#{s}LPORT ==> #{ui.split()[2]}"
                                    else
                                        puts "#{e}No such option!"
                                    end
                                else
                                    if ui.split()[1].downcase == "lhost"
                                        lhost = ui.split()[2]
                                        puts "#{s}LHOST ==> #{ui.split()[2]}"
                                    elsif ui.split()[1].downcase == "lport"
                                        lport = ui.split()[2]
                                        puts "#{s}LPORT ==> #{ui.split()[2]}"
                                    elsif ui.split()[1].downcase == "shell"
                                        shell = ui.split()[2]
                                        puts "#{s}SHELL ==> #{ui.split()[2]}"
                                    elsif ui.split()[1].downcase == "output"
                                        file = ui.split()[2]
                                        puts "#{s}OUTPUT ==> #{ui.split()[2]}"
                                    else
                                        puts "#{e}No such option!"
                                    end
                                end
                            else
                                if ui.split()[1].downcase == "lhost"
                                    lhost = ui.split()[2]
                                    puts "#{s}LHOST ==> #{ui.split()[2]}"
                                elsif ui.split()[1].downcase == "lport"
                                    lport = ui.split()[2]
                                    puts "#{s}LPORT ==> #{ui.split()[2]}"
                                else
                                    puts "#{e}No such option!"
                                end
                            end
                        end
                    end
                elsif ui == "run"
                    if type == "payload"
                        if ifraw == "payload/cmd" or ifraw == "payload/raw"
                            if lhost == "" or lport == ""
                                puts "#{e}Failed to generate payload!"
                            else
                                system("ruby modules/#{c[4..-1]}.rb --local-host=#{lhost} --local-port=#{lport}")
                            end
                        else
                            if lhost == "" or lport == "" or shell == "" or file == ""
                                puts "#{e}Failed to generate payload!"
                            else
                                system("ruby modules/#{c[4..-1]}.rb --local-host=#{lhost} --local-port=#{lport} --target-shell=#{shell} --output-file=#{file}")
                            end
                        end
                    else
                        if lhost == "" or lport == ""
                            puts "#{e}Failed to start listener!"
                        else
                            system("ruby modules/#{c[4..-1]}.rb --local-host=#{lhost} --local-port=#{lport}")
                        end
                    end
                else
                    puts "#{e}Unrecognized command!"
                end
            end
        else
            puts "#{e}No such module!"
        end
    end
else
    puts "#{e}Urecognized command!" 
end
end
